#include <stdio.h>
#include <stdlib.h>
#include<iostream>
#include<string.h>
using namespace std;
struct stack
{
    int size;
    int top;
    char *s;
};

void push(stack *st,char data)
{
    if(st->top==st->size-1)
        cout<<"stack is overflow\n";
    else
    {
        st->top++;
        st->s[st->top]=data;
    }
}
char pop(stack *st)
{
    int data=-1;
    if(st->top==-1)
        cout<<"stack is underflow\n";
    else
    {
        data=st->s[st->top];
        st->top--;
    }
    return data;
}


int isempty(stack *st)
{
    if(st->top==-1)
        return 1;
    else
        return 0;
}
int stacktop(stack *st)
{
    if(st->top==-1)
        return -1;
    else
    {
        return st->s[st->top];
    }
}
int isoperand(char c)
{
    if(c=='+' ||c=='-' ||c=='*' ||c=='/' ||c=='(' ||c==')' )
        return 0;
    else
        return 1;
}
int precedence(char c)
{
    if(c=='+' ||c=='-')
        return 1;
    else if(c=='*' ||c=='/' )
        return 2;
    else if(c=='(' ||c==')' )
        return 3;
    else
        return 0;

}
char* convert(stack *st,char *infix)
{
    char *postfix=new char[sizeof(strlen(infix)+1)];
    int i=0,j=0;
    while(infix[i]!='\0')
    {
        if(isoperand(infix[i]))
        {
            postfix[j]=infix[i];
            j++;
            i++;
        }
        else
        {
            if(precedence(infix[i])>precedence(stacktop(st)))
            {
                push(st,infix[i++]);
            }
            else
            {
                postfix[j]=pop(st);
                j++;
            }
        }
    }
    while(!isempty(st))
    {
        postfix[j++]=pop(st);
    }
    postfix[j]='\0';
    return postfix;
}
int main()
{
    stack st;
    char *exp="a+b*c-d/e";
  //  cout<<isbalance(&st,exp);
    puts(convert(&st,exp));
    return 0;
}
