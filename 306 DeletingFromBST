#include <stdio.h>
#include <stdlib.h>
#include<iostream>
#include<string.h>
using namespace std;
class node   //this node is for tree
{
public:
    node *lchild;
    int data;
    node *rchild;

};
class Tree
{
public:
    node *root;
    Tree(){root=NULL;}
    node* CreateTree(node* p,int key);
    void Preorder(node *p);
    void Postorder(node *p);
    void Inorder(node *p);
    int Height(node*);
    node* Delete(node* p,int key);
    int Search(node *p,int key);
    node* InPre(node*);
    node* InSucc(node*);
};
node* Tree:: CreateTree(node *p,int key)
{

    if(p==NULL) //this is for creating first node
    {
        node*t;
        t=new node;
        t->data=key;
        t->lchild=t->rchild=NULL;
        return t;
    }
    if(key<p->data)
    {
        p->lchild=CreateTree(p->lchild,key);
    }
    else if(key>p->data)
    {
        p->rchild=CreateTree(p->rchild,key);
    }
    return p;
}
int Tree::Height(node*p)
{
    int x,y;
    if(p==NULL)return 0;
    x=Height(p->lchild);
    y=Height(p->rchild);
    return x>y?x+1:y+1;
}
node* Tree::InPre(node*p)
{
    while(p&&p->rchild!=NULL)
    {
        p=p->rchild;
    }
    return p;

}
node* Tree::InSucc(node*p)
{
    while(p&&p->lchild!=NULL)
    {
        p=p->lchild;
    }
    return p;

}
node*Tree::Delete(node*p,int key)
{
    node* q;
    if(p==NULL) // if the node is root?
        return NULL;
    if(p->lchild==NULL &&p->rchild==NULL && p->data==key) // if it is a leaf node
    {
        if(p==root)
            root=NULL;
        free(p);
        return NULL;
    }
    if(key<p->data)
    {
        p->lchild=Delete(p->lchild,key);
    }
    else if(key>p->data)
    {
        p->rchild=Delete(p->rchild,key);
    }
    else                 // p->data==key ,,,means it is means key is not a leaf node
    {
        if(Height(p->lchild)>Height(p->rchild))
        {
            q=InPre(p->lchild); //INorder preceddor
            p->data=q->data;
            p->lchild=Delete(p->lchild,q->data);
        }
        else
        {
            q=InSucc(p->rchild);
            p->data=q->data;
            p->rchild=Delete(p->rchild,q->data);
        }
    }
    return p;
}
int Tree::Search(node *p,int key)
{
    if(p==NULL)
    {
        return -1;
    }
    if(p->data==key)
    {
        return p->data;
    }
    else if(key<p->data)
    {
        Search(p->lchild,key);
    }
    else
        Search(p->rchild,key);
}
void Tree::Preorder(node*p)
{
    if(p)
    {
        printf("%d ",p->data);
        Preorder(p->lchild);
        Preorder(p->rchild);
    }

}
void Tree::Inorder(node*p)
{
    if(p)
    {
        Inorder(p->lchild);
        printf("%d ",p->data);
        Inorder(p->rchild);
    }

}


int main()
{
    Tree t;
    t.root=t.CreateTree(t.root,20);
    t.CreateTree(t.root,10);
    t.CreateTree(t.root,30);
    t.CreateTree(t.root,15);
    t.CreateTree(t.root,40);
    t.Delete(t.root,20);
    t.Inorder(t.root);

 //   int temp=t.Search(t.root,15);
 //   cout<<temp;

    return 0;



}
