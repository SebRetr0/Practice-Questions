#include <stdio.h>
#include <stdlib.h>
#include<iostream>
#include<string.h>
using namespace std;
class node   //this node is for tree
{
public:
    node *lchild;
    int data;
    node *rchild;

};
class queue
{
private:
    int size;
    int front;
    int rear;
    node **Q;  //because it contains the address of a queue which is holding adresses of tree nodes (node*)
public:
    queue(int size){front=rear=-1;this->size=size;Q=new node*[size];} //here we use node* because it contains addresses of tree nodes
    void enqueue(node* x);
    node* dequeue();
    void display();
    int isEmpty();

};
void queue:: enqueue(node* data)
{
    if(rear==size-1)
        cout<<"queue is full";
    else
    {
        rear++;
        Q[rear]=data;
    }
}
node* queue:: dequeue()
{
    node *x=NULL;
    if(rear==front)
    {
        cout<<"queue is empty";
        return NULL;
    }
    else
    {
        front++;
        return Q[front];
    }
}
void queue:: display()
{
    for(int i=front+1;i<=rear;i++)
    {
        cout<<Q[i]<<" ";
    }
    cout<<endl;
}
int queue::isEmpty()
{
    if(front==rear)
        return 1;
    return 0;
}









class Tree
{
public:
    node *root;
    Tree(){root=NULL;}
    void CreateTree();
    void Preorder(node *p);
    void Postorder(node *p);
    void Inorder(node *p);
    void Levelorder(node *p);
    void Height(node *root);
};
void Tree:: CreateTree()
{
    node *p,*t;
    int x;
    queue q(100);
    printf("Enter Root Value \n");
    cin>>x;
    root= new node;
    root->data=x;
    root->lchild=root->rchild=NULL;
    q.enqueue(root);
    while(!q.isEmpty())
    {
        p=q.dequeue();
        printf("enter left child of %d",p->data);
        cin>>x;
        if(x!=-1)
        {
            t=new node;
            t->data=x;
            t->lchild=t->rchild=NULL;
            p->lchild=t;
            q.enqueue(t);
        }
            printf("enter right child of %d",p->data);
        cin>>x;
        if(x!=-1)
        {
            t=new node;
            t->data=x;
            t->lchild=t->rchild=NULL;
            p->rchild=t;
            q.enqueue(t);
        }

    }

}
void Tree::Preorder(node*p)
{
    if(p)
    {
        printf("%d ",p->data);
        Preorder(p->lchild);
        Preorder(p->rchild);
    }

}

int main()
{
    Tree t;
    t.CreateTree();
    t.Preorder(t.root);
    return 0;



}
